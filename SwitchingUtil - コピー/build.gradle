/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'tekuteku_tomotomo' at '16/05/08 14:20' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'	// add fujita

def defaultEncoding = 'MS932'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

def mainClassName = 'app.ComMain'
def executableBaseName = "SwitchingUtilExec"

eclipse {
    pathVariables 'GRADLE_USER_HOME': gradle.gradleUserHomeDir
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
		compile 'org.mybatis:mybatis:3.3.0'
		//compile 'mysql:mysql-connector-java:5.1.38'
		
		// http://mvnrepository.com/artifact/commons-lang/commons-lang
		compile group: 'commons-lang', name: 'commons-lang', version: '2.2'

		compile fileTree(dir: 'libs', include: '*.jar')
		
}

//processResources {
//    include '*.xml'
//}

jar {
    // デフォルトではxmlやpropertiesファイルはjarに含まれない
    // jarファイルにxmlなども含める場合、このように指定
    // のちに自分の誤りであることが判明：　resource -> resourcesフォルダ名修正で
    //from (sourceSets.main.allSource) {
    //   exclude '**/*.java'			// ただしjavaは弾く
    //}
}

task executableJar(type: Jar, dependsOn: jar)  {
    archiveName = "${executableBaseName}.jar"
    manifest {
        attributes 'Main-Class' : mainClassName
    }

    // デフォルトではxmlやpropertiesファイルはjarに含まれない
    // jarファイルにxmlなども含める場合、このように指定
    // のちに自分の誤りであることが判明：　resource -> resourcesフォルダ名修正で
    //from (sourceSets.main.allSource) {
    //   exclude '**/*.java'			// ただしjavaは弾く
    //}
    
    from configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}
    from "$buildDir/classes/main"
    from "$buildDir/resources/main"
    
    //zipFileSet(dir: "$rootDir/lib")
    //new File("$rootDir/build/classes").listFiles().findAll{ it.directory }.each{
    //    zipFileSet(dir: it.path)
    //}
}
